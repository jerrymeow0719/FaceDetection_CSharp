using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;
using System.IO;
using Emgu;
using Emgu.CV;
using FaceDetect_EmguCV;
using OpenCvSharp;
using OpenCvSharp.Dnn;

namespace TSFaceDetection
{
    public class TSFaceDetection
    {
        public void FaceDtect(string FileName, string FaceFileName_Cascade) { }
        public void FaceDtect(string FileName, string ConfigFile_YOLO, string Weights_YOLO, string[] Label, int[] DetectClass) { }
        private OpenCVResult FaceDetect(Emgu.CV.Mat Frame, string FaceFileName_Cascade)
        {
            long detectionTime;
            List<Rectangle> faces = new List<Rectangle>();
            List<Rectangle> eyes = new List<Rectangle>();

            DetectFace.DetectFaceOnly(
                Frame, FaceFileName_Cascade,
                faces,
                out detectionTime);

            OpenCVResult result = new OpenCVResult()
            {
                faces = faces,
                eyes = eyes,
            };

            return result;
        }
        private OpenCVResult FaceDetect(Emgu.CV.Mat Frame, string ConfigFile_YOLO, string Weights_YOLO,string[] Label, int[] DetectClass)
        {
            List<Rectangle> faces = new List<Rectangle>();
            List<Rectangle> eyes = new List<Rectangle>();

            YOLOConfig_Parameter yOLOConfig_Parameter = new YOLOConfig_Parameter();
            yOLOConfig_Parameter = YOLOConfig_Parse(ConfigFile_YOLO);

            if (File.Exists(@"Process.jpg"))
                File.Delete(@"Process.jpg");
            CvInvoke.Imwrite(@"Process.jpg", Frame);
            var org = Cv2.ImRead(@"Process.jpg");
            var w = org.Width;
            var h = org.Height;
            //setting blob, parameter are important
            var blob = CvDnn.BlobFromImage(org, 1 / 255.0, new OpenCvSharp.Size(yOLOConfig_Parameter.Width, yOLOConfig_Parameter.Height), new OpenCvSharp.Scalar(), true, false);
            var net = CvDnn.ReadNetFromDarknet(ConfigFile_YOLO, Weights_YOLO);
            net.SetInput(blob, "data");
            var prob = net.Forward();

            /* YOLO2 VOC output
             0 1 : center                    2 3 : w/h
             4 : confidence                  5 ~24 : class probability */
            const int prefix = 5;   //skip 0~4

            for (int i = 0; i < prob.Rows; i++)
            {
                var confidence = prob.At<float>(i, 4);
                if (confidence > yOLOConfig_Parameter.Threshold)
                {
                    //get classes probability
                    Cv2.MinMaxLoc(prob.Row[i].ColRange(prefix, prob.Cols), out _, out OpenCvSharp.Point max);
                    var classes = max.X;
                    var probability = prob.At<float>(i, classes + prefix);

                    if (probability != 0 && DetectClass.Contains(classes)) //more accuracy
                    {
                        //get center and width/height
                        var centerX = prob.At<float>(i, 0) * w;
                        var centerY = prob.At<float>(i, 1) * h;
                        var width = prob.At<float>(i, 2) * w;
                        var height = prob.At<float>(i, 3) * h;
                        
                        var x1 = (centerX - width / 2) < 0 ? 0 : centerX - width / 2;
                        var y1 = (centerY - height / 2) < 0 ? 0 : centerY - height / 2;

                        faces.Add(new Rectangle(
                        (int)(x1),
                        (int)(y1),
                        (int)(width),
                        (int)(height)
                        ));
                    }
                }
            }
            net.Dispose();
            blob.Dispose();
            prob.Dispose();


            OpenCVResult result = new OpenCVResult()
            {
                eyes = eyes,
                faces = faces,
            };

            return result;
        }

        private class OpenCVResult
        {
            public List<Rectangle> faces { get; set; }
            public List<Rectangle> eyes { get; set; }
        }
        private class YOLOConfig_Parameter
        {
            public double Width;
            public double Height;
            public double Threshold;
        }

        public class TSDetectFace
        {
            UInt32 FramePos;
            Rectangle Faces;
            bool IsEnable = true;
        }

        private YOLOConfig_Parameter YOLOConfig_Parse(string ConfigFile_YOLO)
        {
            string line;
            YOLOConfig_Parameter yOLOConfig_Parameter = new YOLOConfig_Parameter();
            StreamReader SR = new StreamReader(ConfigFile_YOLO);
            while ((line = SR.ReadLine()) != null)
            {
                if (line.Contains("width"))
                    yOLOConfig_Parameter.Width = Convert.ToDouble(line.Substring(line.IndexOf("=") + 1, line.Length - line.IndexOf("=") - 1));
                else if (line.Contains("height"))
                    yOLOConfig_Parameter.Height = Convert.ToDouble(line.Substring(line.IndexOf("=") + 1, line.Length - line.IndexOf("=") - 1));
                else if (line.Contains("thresh"))
                    yOLOConfig_Parameter.Threshold = Convert.ToDouble(line.Substring(line.IndexOf("=") + 1, line.Length - line.IndexOf("=") - 1));
                else
                    continue;
            }
            return yOLOConfig_Parameter;
        }
    }
}
